package Ljc.JFramework;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.HashMap;

import Ljc.JFramework.Utility.Tuple;

public class EntityBufCore {
	private static final short DefaultShort = 0;
	private static final char DefaultUShort = 0;
	private static final int DefaultInt = 0;
	private static final long DefaultLong = 0;
	private static final byte DefaultByte = 0;
	private static final char DefaultChar = 0;
	private static final double DefaultDouble = 0;
	private static final float DefaultFloat = 0;
	private static final String DefaultString = "";
	private static final BigDecimal DefaultDecimal = BigDecimal.ZERO;
	private static final Boolean DefaultBool = false;

	private static HashMap<Integer, Tuple<EntityBufType, Boolean>> TypeBufTypeDic = new HashMap<Integer, Tuple<EntityBufType, Boolean>>();

	private static EntityBufType MapBufType(Class type, Box<Boolean> isArray) {
		EntityBufType ebtype = new EntityBufType();
		ebtype.setValueType(type);

		if (type.isArray())
		// if (type.Name.EndsWith("[]"))
		{
			isArray.setData(true);

			// String typefullname = String.Format("{0}, {1}",
			// type.getTypeName().substring(0, type.getTypeName().lastIndexOf('[')),
			// type.ass.FullName);
			ebtype.setClassType(type);
		} else {
			isArray.setData(false);
			ebtype.setClassType(type);
		}

		if (ebtype.getClass().isPrimitive()) {
			String typename = ebtype.getClassType().getName();
			switch (typename) {
			case "Short":
				ebtype.setEntityType(EntityType.SHORT);
				ebtype.setDefaultValue(DefaultShort);
				break;
			case "UInt16":
			case "Ushort":
				ebtype.setEntityType(EntityType.USHORT);
				ebtype.setDefaultValue(DefaultUShort);
				break;
			case "Int16":
				ebtype.setEntityType(EntityType.INT16);
				ebtype.setDefaultValue(DefaultShort);
				break;
			case "Int32":
				ebtype.setEntityType(EntityType.INT32);
				ebtype.setDefaultValue(DefaultInt);
				break;
			case "Long":
			case "Int64":
				ebtype.setEntityType(EntityType.INT64);
				ebtype.setDefaultValue(DefaultLong);
				break;
			case "Byte":
				ebtype.setEntityType(EntityType.BYTE);
				ebtype.setDefaultValue(DefaultByte);
				break;
			case "Char":
				ebtype.setEntityType(EntityType.CHAR);
				ebtype.setDefaultValue(DefaultChar);
				break;
			case "Double":
				ebtype.setEntityType(EntityType.DOUBLE);
				ebtype.setDefaultValue(DefaultDouble);
				break;
			case "Float":
				ebtype.setEntityType(EntityType.FLOAT);
				ebtype.setDefaultValue(DefaultFloat);
				break;
			case "String":
				ebtype.setEntityType(EntityType.STRING);
				ebtype.setDefaultValue(DefaultString);
				break;
			case "DateTime":
				ebtype.setEntityType(EntityType.DATETIME);
				break;
			case "Decimal":
				ebtype.setEntityType(EntityType.DECIMAL);
				ebtype.setDefaultValue(DefaultDecimal);
				break;
			case "Boolean":
				ebtype.setEntityType(EntityType.BOOL);
				ebtype.setDefaultValue(DefaultBool);
				break;
			case "Dictionary`2":
				ebtype.setEntityType(EntityType.DICTIONARY);
				break;
			case "List`1":
				ebtype.setEntityType(EntityType.LIST);
				break;
			default:
				if (isArray.getData()) {
					ebtype.setEntityType(EntityType.ARRAY);
				} else if (ebtype.getClassType().isEnum()) {
					ebtype.setEntityType(EntityType.ENUM);
				} else {
					ebtype.setEntityType(EntityType.COMPLEX);
				}
				break;
			}
		} else {
			ebtype.setEntityType(EntityType.COMPLEX);
		}

		return ebtype;
	}

	public static Tuple<EntityBufType, Boolean> GetTypeBufType(Class cls) {
		if (cls == null) {
			return null;
		}
		int key = cls.hashCode();
		Tuple<EntityBufType, Boolean> tp = TypeBufTypeDic.getOrDefault(key, null);
		if (tp != null) {
			return tp;
		} else {
			Box<Boolean> isArray = new Box<Boolean>();
			EntityBufType objType = MapBufType(cls, isArray);
			Tuple<EntityBufType, Boolean> touple = new Tuple<EntityBufType, Boolean>(objType, isArray.getData());
			try {
				TypeBufTypeDic.put(key, touple);
			} catch (Exception ex) {

			}
			return touple;
		}
	}

	private static void SerializeSimple(Object val, Boolean isArray, EntityBufType bufType,
			ByteArrayOutputStream msWriter) {

	}

	private static void Serialize(Object o, ByteArrayOutputStream buffer) {
		if (o == null) {
			EntityBufTypeFlag flag = EntityBufTypeFlag.VlaueNull;
			buffer.write(flag.getVal());
			return;
		} else {
			EntityBufTypeFlag flag = EntityBufTypeFlag.Empty;
			buffer.write(flag.getVal());
		}
		Tuple<EntityBufType, Boolean> tuple = GetTypeBufType(o.getClass());

		if (tuple.GetItem1().getEntityType() != EntityType.COMPLEX) {

		}
	}

	public static byte[] Serialize(Object o) throws IOException {
		if (null == o) {
			return null;
		}
		ByteArrayOutputStream buffer = new ByteArrayOutputStream();

		try {
			Serialize(o, buffer);

			return buffer.toByteArray();
		} finally {
			buffer.close();
		}
	}
}
