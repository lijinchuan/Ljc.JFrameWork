package Ljc.JFramework;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

import Ljc.JFramework.Utility.BitConverter;

public class MemoryStreamWriter {
	private ByteArrayOutputStream _ms = null;
	private long position = 0;

	public MemoryStreamWriter(ByteArrayOutputStream ms) {
		this._ms = ms;
	}

	private byte[] CompressInt32(int num) {
		byte[] byts = null;

		if (num >= 0) {
			if (num <= Byte.MAX_VALUE) {
				byts = new byte[] { (byte) num };
			} else if (num <= Short.MAX_VALUE) {
				byts = BitConverter.GetBytes((short) num);
			}
		}
		if (byts == null)
			byts = BitConverter.GetBytes(num);
		return byts;
	}

	public void write(byte[] b) throws IOException {
		this._ms.write(b);
	}

	public void write(int b) {
		this._ms.write(b);
	}

	public void WriteString(String str) throws Exception {
		if (str == null) {
			_ms.write((byte) StringTypeFlag.NULL.getVal());
			return;
		} else if (str.isEmpty()) {
			_ms.write((byte) StringTypeFlag.Empty.getVal());
			return;
		}

		byte[] byts;
		int flag = StringTypeFlag.DEFAULT.getVal();

		// bool isAsscii = StringHelper.IsAscii(str);
		Boolean isAsscii = false;
		if (isAsscii) {
			flag = StringTypeFlag.AssciiEncoding.getVal();
			byts = str.getBytes("ascii");
		} else {
			flag = StringTypeFlag.UTF8Encoding.getVal();
			byts = str.getBytes("UTF-8");
		}

		byte[] lenbytes = null;
		if (byts.length <= Byte.MAX_VALUE) {
			flag |= StringTypeFlag.ByteLen.getVal();
			lenbytes = new byte[] { (byte) byts.length };
		} else if (byts.length <= Short.MAX_VALUE) {
			flag |= StringTypeFlag.ShortLen.getVal();
			lenbytes = BitConverter.GetBytes((short) byts.length);
		} else if (byts.length <= Integer.MAX_VALUE) {
			flag |= StringTypeFlag.IntLen.getVal();
			lenbytes = BitConverter.GetBytes(byts.length);
		} else {
			throw new Exception("×Ö·û´®Ì«³¤¡£");
		}

		_ms.write((byte) flag);
		_ms.write(lenbytes, 0, lenbytes.length);

		_ms.write(byts, 0, byts.length);

	}

	public void WriteStringArray(String[] strArray) throws Exception {
		if (strArray == null) {
			_ms.write((byte) StringTypeFlag.NULL.getVal());
			return;
		}

		byte[] lenbytes = CompressInt32(strArray.length);
		if (lenbytes.length == 1) {
			_ms.write((byte) StringTypeFlag.ByteLen.getVal());
		} else if (lenbytes.length == 2) {
			_ms.write((byte) StringTypeFlag.ShortLen.getVal());
		} else {
			_ms.write((byte) StringTypeFlag.IntLen.getVal());
		}

		_ms.write(lenbytes, 0, lenbytes.length);

		for (String s : strArray) {
			WriteString(s);
		}
	}

	public void WriteInt32(int num)
    {
        if (num == 0)
        {
            _ms.write((byte)IntTypeFlag.Zero);
            return;
        }
        IntTypeFlag flag = IntTypeFlag.DEFAULT;
        if (num < 0)
        {
            flag = IntTypeFlag.Minus;
            num = Math.Abs(num);
        }
        byte[] byts = null;

        if (num <= byte.MaxValue)
        {
            byts = new byte[] { (byte)num };
            flag |= IntTypeFlag.BYTE;
        }
        else if (num <= ushort.MaxValue)
        {
            byts = BitConverter.GetBytes((ushort)num);
            flag |= IntTypeFlag.SHORT;
        }

        if (byts == null)
        {
            byts = BitConverter.GetBytes(num);
            flag |= IntTypeFlag.INT;
        }

        _ms.WriteByte((byte)flag);
        _ms.Write(byts, 0, byts.Length);
    }

	public void WriteByteArray(byte[] data) {
		if (data == null) {
			this._ms.write(-1);
		} else {
			this.WriteInt32(data.length);
			this.WriteBytes(data);
		}
	}
}
