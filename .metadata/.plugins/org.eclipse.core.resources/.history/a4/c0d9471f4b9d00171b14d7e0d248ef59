package Ljc.JFramework;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;

import Ljc.JFramework.Utility.Tuple;

public class EntityBufCore {
	private static HashMap<Integer, Tuple<EntityBufType, Boolean>> TypeBufTypeDic = new HashMap<Integer, Tuple<EntityBufType, Boolean>>();

	private static EntityBufType MapBufType(Type type, out bool isArray)
    {
        EntityBufType ebtype = new EntityBufType();
        ebtype.ValueType = type;

        if(type.IsArray)
        //if (type.Name.EndsWith("[]"))
        {
            isArray = true;
            string typefullname = string.Format("{0}, {1}", type.FullName.Substring(0, type.FullName.LastIndexOf('[')),
                            type.Assembly.FullName);
            ebtype.ClassType = Type.GetType(typefullname);
        }
        else
        {
            isArray = false;
            ebtype.ClassType = type;
        }

        string typename = ebtype.ClassType.Name;
        switch (typename)
        {
            case "Short":
                ebtype.EntityType = EntityType.SHORT;
                ebtype.DefaultValue = Default(short);
                break;
            case "UInt16":
            case "Ushort":
                ebtype.EntityType = EntityType.USHORT;
                ebtype.DefaultValue = Default(ushort);
                break;
            case "Int16":
                ebtype.EntityType = EntityType.INT16;
                ebtype.DefaultValue = Default(Int16);
                break;
            case "Int32":
                ebtype.EntityType = EntityType.INT32;
                ebtype.DefaultValue = Default(Int16);
                break;
            case "Long":
            case "Int64":
                ebtype.EntityType = EntityType.INT64;
                ebtype.DefaultValue = Default(Int64);
                break;
            case "Byte":
                ebtype.EntityType = EntityType.BYTE;
                ebtype.DefaultValue = Default(Byte);
                break;
            case "Char":
                ebtype.EntityType = EntityType.CHAR;
                ebtype.DefaultValue = Default(Char);
                break;
            case "Double":
                ebtype.EntityType = EntityType.DOUBLE;
                ebtype.DefaultValue = Default(Double);
                break;
            case "Float":
                ebtype.EntityType = EntityType.FLOAT;
                ebtype.DefaultValue = Default(Float);
                break;
            case "String":
                ebtype.EntityType = EntityType.STRING;
                ebtype.DefaultValue = Default(string);
                break;
            case "DateTime":
                ebtype.EntityType = EntityType.DATETIME;
                break;
            case "Decimal":
                ebtype.EntityType = EntityType.DECIMAL;
                ebtype.DefaultValue = Default(decimal);
                break;
            case "Boolean":
                ebtype.EntityType = EntityType.BOOL;
                ebtype.DefaultValue = Default(bool);
                break;
            case "Dictionary`2":
                ebtype.EntityType = EntityType.DICTIONARY;
                break;
            case "List`1":
                ebtype.EntityType = EntityType.LIST;
                break;
            default:
                if(isArray)
                {
                    ebtype.EntityType = EntityType.ARRAY;
                }
                else if (ebtype.ClassType.IsEnum)
                {
                    ebtype.EntityType = EntityType.ENUM;
                }
                else if (ebtype.ClassType.IsClass)
                {
                    ebtype.EntityType = EntityType.COMPLEX;
                }
                break;
        }

        return ebtype;
    }

	public static Tuple<EntityBufType, Boolean> GetTypeBufType(Class cls) {
		if (cls == null) {
			return null;
		}
		int key = cls.hashCode();
		Tuple<EntityBufType, Boolean> tp = TypeBufTypeDic.getOrDefault(key, null);
		if (tp != null) {
			return tp;
		} else {
			Boolean isArray;
			return null;
		}
	}

	private static void Serialize(Object o, ByteArrayOutputStream buffer) {
		if (o == null) {
			EntityBufTypeFlag flag = EntityBufTypeFlag.VlaueNull;
			buffer.write(flag.getVal());
			return;
		} else {
			EntityBufTypeFlag flag = EntityBufTypeFlag.Empty;
			buffer.write(flag.getVal());
		}
		Tuple<EntityBufCore, Boolean> touple = null;
	}

	public static byte[] Serialize(Object o) throws IOException {
		if (null == o) {
			return null;
		}
		ByteArrayOutputStream buffer = new ByteArrayOutputStream();

		try {
			Serialize(o, buffer);

			return buffer.toByteArray();
		} finally {
			buffer.close();
		}
	}
}
